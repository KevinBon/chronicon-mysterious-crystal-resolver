{"version":3,"sources":["constants.js","components/Crystal.js","utils/crystalResolver.js","components/Minimalist.js","App.js","serviceWorker.js","index.js"],"names":["COLOR","STEP","LEFT_ONE","LEFT_TWO","LEFT_THREE","RIGHT_ONE","RIGHT_TWO","RIGHT_THREE","TOP_ONE","TOP_TWO","TOP_THREE","BOTTOM_ONE","BOTTOM_TWO","BOTTOM_THREE","COLORS_ORDER","COLORS_CLASSNAMES","Container","styled","div","COLORS_ORDER_BY_KEY","reduce","memo","color","index","Crystal","onChange","className","colorBasedClassName","onClick","currentColorIndex","newColorIndex","length","newColor","moveLeft","rowIndex","grid","row","moveRight","moveUp","columnIndex","newGrid","cloneGrid","oldColumns","moveDown","STEP_ACTION_MAPPER","useStep","step","isSolved","getRandomStep","steps","Object","keys","max","Math","floor","random","makeRandomStep","indexSteps","push","CrystalContainer","Actions","CrystalButton","indexes","cls","map","key","DEFAULT_GRID","Game","useState","setGrid","resolving","setResolving","state","tries","result","setResult","isValid","setIsValid","setIsSolved","useEffect","counters","y","rows","x","isCrystalValid","isCrystalSolved","maxStep","maxTries","stepsAsIndexed","currentGrid","Array","from","currentStep","currentSteps","debug","resolve","_grid","resolveResult","handleCrystalChange","disabled","App","Minimalist","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.70b36e2c.chunk.js","sourcesContent":["export const COLOR = {\r\n    RED: 'RED',\r\n    BLUE: 'BLUE',\r\n    YELLOW: 'YELLOW'\r\n}\r\n\r\nexport const STEP = {\r\n    LEFT_ONE: 'LEFT_ONE',\r\n    LEFT_TWO: 'LEFT_TWO',\r\n    LEFT_THREE: 'LEFT_THREE',\r\n    // --\r\n    RIGHT_ONE: 'RIGHT_ONE',\r\n    RIGHT_TWO: 'RIGHT_TWO',\r\n    RIGHT_THREE: 'RIGHT_THREE',\r\n    // --\r\n    TOP_ONE: 'TOP_ONE',\r\n    TOP_TWO: 'TOP_TWO',\r\n    TOP_THREE: 'TOP_THREE',\r\n    // --\r\n    BOTTOM_ONE: 'BOTTOM_ONE',\r\n    BOTTOM_TWO: 'BOTTOM_TWO',\r\n    BOTTOM_THREE: 'BOTTOM_THREE',\r\n}","import React from 'react';\r\nimport styled from 'styled-components'\r\nimport { COLOR } from '../constants'\r\n\r\nexport const COLORS_ORDER = [\r\n  COLOR.RED,\r\n  COLOR.BLUE,\r\n  COLOR.YELLOW\r\n]\r\n\r\nexport const COLORS_CLASSNAMES = {\r\n  [COLOR.BLUE]: 'bg-blue-500',\r\n  [COLOR.RED]: 'bg-red-500',\r\n  [COLOR.YELLOW]: 'bg-yellow-500'\r\n}\r\n\r\nconst Container = styled.div`\r\n  min-height: 100px;\r\n`\r\n\r\nexport const COLORS_ORDER_BY_KEY = COLORS_ORDER.reduce((memo, color, index) => ({\r\n  ...memo,\r\n  [color]: index\r\n}), {})\r\n\r\nfunction Crystal({ color = COLOR.RED, onChange, className }) {\r\n\r\n  const handleClick = () => {\r\n    const currentColorIndex = COLORS_ORDER_BY_KEY[color]\r\n    const newColorIndex = currentColorIndex === COLORS_ORDER.length - 1 ? 0 : currentColorIndex + 1\r\n    const newColor = COLORS_ORDER[newColorIndex]\r\n    onChange(newColor)\r\n  }\r\n\r\n  const colorBasedClassName = COLORS_CLASSNAMES[color]\r\n\r\n  return (\r\n    <Container onClick={handleClick} className={`${colorBasedClassName} select-none cursor-pointer rounded text-white ${className}`}>\r\n      {color}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default Crystal;","import { STEP, COLOR } from '../constants';\r\n\r\nexport const moveLeft = (rowIndex) => (grid) => {\r\n    const row = [...grid][rowIndex]\r\n    grid[rowIndex] = [row[1], row[2], row[0]]\r\n    return grid\r\n} \r\n\r\nexport const moveRight = (rowIndex) => (grid) => {\r\n    const row = [...grid][rowIndex]\r\n    grid[rowIndex] = [row[2], row[0], row[1]]\r\n    return grid\r\n}\r\n\r\nexport const moveUp = (columnIndex) => (grid) => {\r\n    let newGrid = cloneGrid(grid)\r\n\r\n\r\n    const oldColumns = [grid[0][columnIndex], grid[1][columnIndex], grid[2][columnIndex]]\r\n\r\n    newGrid[0][columnIndex] = oldColumns[1]\r\n    newGrid[1][columnIndex] = oldColumns[2]\r\n    newGrid[2][columnIndex] = oldColumns[0]\r\n\r\n    return newGrid\r\n}\r\n\r\nconst cloneGrid = (grid) => {\r\n    return [\r\n        [...grid[0]],\r\n        [...grid[1]],\r\n        [...grid[2]],\r\n    ]\r\n}\r\n\r\nexport const moveDown = (columnIndex) => (grid) => {\r\n    let newGrid = cloneGrid(grid)\r\n\r\n    const oldColumns = [grid[0][columnIndex], grid[1][columnIndex], grid[2][columnIndex]]\r\n        \r\n    newGrid[0][columnIndex] = oldColumns[2]\r\n    newGrid[1][columnIndex] = oldColumns[0]\r\n    newGrid[2][columnIndex] = oldColumns[1]\r\n\r\n    return newGrid\r\n}\r\n\r\nconst STEP_ACTION_MAPPER = {\r\n    [STEP.LEFT_ONE]: moveLeft(0),\r\n    [STEP.LEFT_TWO]: moveLeft(1),\r\n    [STEP.LEFT_THREE]: moveLeft(2),\r\n    // --\r\n    [STEP.RIGHT_ONE]: moveRight(0),\r\n    [STEP.RIGHT_TWO]: moveRight(1),\r\n    [STEP.RIGHT_THREE]: moveRight(2),\r\n    // --\r\n    [STEP.TOP_ONE]: moveUp(0),\r\n    [STEP.TOP_TWO]: moveUp(1),\r\n    [STEP.TOP_THREE]: moveUp(2),\r\n    // --\r\n    [STEP.BOTTOM_ONE]: moveDown(0),\r\n    [STEP.BOTTOM_TWO]: moveDown(1),\r\n    [STEP.BOTTOM_THREE]: moveDown(2),\r\n}\r\n\r\nexport function useStep(grid, step) {\r\n    return STEP_ACTION_MAPPER[step](grid)\r\n}\r\n\r\nexport function isSolved(grid) {\r\n    // horizontal\r\n    if (grid[0][0] === grid[0][1] && grid[0][1] === grid[0][2]) {\r\n        return (\r\n            (grid[1][0] === grid[1][1] && grid[1][1] === grid[1][2]) &&\r\n            (grid[2][0] === grid[2][1] && grid[2][1] === grid[2][2])\r\n        )\r\n    }\r\n    // vertical\r\n    return (\r\n        (grid[0][0] === grid[1][0] && grid[1][0] === grid[2][0]) &&\r\n        (grid[0][1] === grid[1][1] && grid[1][1] === grid[2][1]) &&\r\n        (grid[0][2] === grid[1][2] && grid[1][2] === grid[2][2])\r\n    )\r\n}\r\n\r\nfunction makeRandomStep() {\r\n    const steps = Object.keys(STEP)\r\n    const max = steps.length - 1\r\n    return function() {\r\n        return steps[Math.floor(Math.random() * Math.floor(max))]\r\n    }\r\n}\r\n\r\nexport const getRandomStep = makeRandomStep()\r\n\r\nconst indexSteps = (steps = []) => steps.reduce((memo, step, index) => {\r\n    if (!(step in memo)) {\r\n        memo[step] = []\r\n    }\r\n    memo[step].push(index + 1)\r\n    return memo\r\n}, {})\r\n\r\nexport function resolve(grid, { maxStep = 5, maxTries = 20000, stepsAsIndexed = true } = {}) {\r\n    let currentGrid = Array.from(grid)\r\n    let currentStep = 0\r\n    let currentSteps = []\r\n    const result = {\r\n        state: null,\r\n        tries: 0,\r\n        steps: [],\r\n        grid: [],\r\n        debug: []\r\n    }\r\n\r\n    while (true) {\r\n        if (isSolved(currentGrid)) {\r\n            result.state = 'WIN'\r\n            break\r\n        }\r\n        if (result.tries >= maxTries) {\r\n            result.state = 'ABORT_MAX_TRIES'\r\n            break;\r\n        }\r\n        result.tries += 1\r\n        if (currentSteps.length >= maxStep) {\r\n            currentGrid = Array.from(grid)\r\n            currentSteps = []\r\n        }\r\n        currentStep = getRandomStep()\r\n        currentSteps.push(currentStep)\r\n        // eslint-disable-next-line react-hooks/rules-of-hooks\r\n        currentGrid = useStep(currentGrid, currentStep)\r\n        \r\n    }\r\n    if (result.state === 'WIN') {\r\n        result.steps = stepsAsIndexed ? indexSteps(currentSteps) : currentSteps\r\n        result.grid = currentGrid\r\n     \r\n    }\r\n    return result\r\n}\r\n\r\nexport function isValid(grid) {\r\n    const counters = {\r\n        [COLOR.BLUE]: 0,\r\n        [COLOR.RED]: 0,\r\n        [COLOR.YELLOW]: 0\r\n    }\r\n\r\n    for (let y = 0; y < grid.length; y++) {\r\n        const rows = grid[y];\r\n        for (let x = 0; x < rows.length; x++) {\r\n            const color = rows[x]\r\n            counters[color] += 1\r\n            if (counters[color] > 3) {\r\n                return false\r\n            }\r\n        }\r\n    }\r\n    return true\r\n}","import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components'\r\nimport Crystal from './Crystal'\r\nimport { COLOR, STEP } from '../constants';\r\nimport { resolve, isValid as isCrystalValid, isSolved as isCrystalSolved } from '../utils/crystalResolver'\r\n\r\nconst CrystalContainer = styled.div`\r\n    display: grid;\r\n    grid-template-columns: 1fr 1fr 1fr 1fr 1fr;\r\n    grid-template-rows: 1fr 1fr 1fr 1fr 1fr;\r\n    gap: 6px 6px;\r\n    grid-template-areas: \r\n        \". . . . .\"\r\n        \". . . . .\"\r\n        \". . . . .\"\r\n        \". . . . .\"\r\n        \". . . . .\";\r\n`\r\n\r\nconst Actions = styled.div``;\r\n\r\nconst CrystalButton = ({ indexes }) => {\r\n    const cls = indexes && indexes.length ? 'font-mono subpixel-antialiased font-semibold shadow-lg flex justify-center bg-gray-300 flex-row items-center text-lg text-gray-800' : ''\r\n    return (<div className={cls}>{(indexes || []).map(index => <div key={index} className=\"flex-grow\">{index}</div>)}</div>)\r\n}\r\n\r\nconst DEFAULT_GRID = [\r\n    [COLOR.BLUE, COLOR.RED, COLOR.BLUE],\r\n    [COLOR.RED, COLOR.BLUE, COLOR.RED],\r\n    [COLOR.YELLOW, COLOR.YELLOW, COLOR.YELLOW],\r\n]\r\n\r\nfunction Game({ className }) {\r\n    const [grid, setGrid] = useState([...DEFAULT_GRID])\r\n    const [resolving, setResolving] = useState(false)\r\n    const [result, setResult] = useState({ state: 'IDLE', steps: [], tries: 0 })\r\n    const [isValid, setIsValid] = useState(false)\r\n    const [isSolved, setIsSolved] = useState(false)\r\n    useEffect(() => {\r\n        setIsValid(isCrystalValid(grid))\r\n    }, [grid])\r\n    useEffect(() => {\r\n        setIsSolved(isCrystalSolved(grid))\r\n    }, [grid, isValid])\r\n    // const memoizedCallback = useCallback(\r\n    //     () => {\r\n    //         doSomething(a, b);\r\n    //     },\r\n    //     [resolving],\r\n    // );\r\n    // const [countTries, setCurrentCountTries] = useState(0)\r\n    useEffect(() => {\r\n        if (resolving) {\r\n            const { grid: _grid, ...resolveResult } = resolve(grid)\r\n            if (resolveResult.state === 'WIN') {\r\n                setGrid(_grid)\r\n            }\r\n            setResult({ ...resolveResult })\r\n            setResolving(false)\r\n        }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [resolving])\r\n\r\n    const handleCrystalChange = (x, y) => (newColor) => {\r\n        const newGrid = [...grid]\r\n        newGrid[x][y] = newColor\r\n        setGrid(newGrid)\r\n    }\r\n\r\n    const toggleResolver = () => {\r\n        setResolving(!resolving)\r\n    }\r\n\r\n    return (\r\n        <div className={`${className} overflow-hidden`}>\r\n            <CrystalContainer className=\"w-full\">\r\n            <div></div><CrystalButton indexes={result?.steps?.[STEP.TOP_ONE]} /><CrystalButton indexes={result?.steps?.[STEP.TOP_TWO]} /><CrystalButton indexes={result?.steps?.[STEP.TOP_THREE]} /><div></div>\r\n            <CrystalButton indexes={result?.steps?.[STEP.LEFT_ONE]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:0-y:0`} onChange={handleCrystalChange(0, 0)} color={grid[0][0]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:0-y:1`} onChange={handleCrystalChange(0, 1)} color={grid[0][1]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:0-y:2`} onChange={handleCrystalChange(0, 2)} color={grid[0][2]} />\r\n            <CrystalButton indexes={result?.steps?.[STEP.RIGHT_ONE]} />\r\n            <CrystalButton indexes={result?.steps?.[STEP.LEFT_TWO]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:1-y:0`} onChange={handleCrystalChange(1, 0)} color={grid[1][0]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:1-y:1`} onChange={handleCrystalChange(1, 1)} color={grid[1][1]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:1-y:2`} onChange={handleCrystalChange(1, 2)} color={grid[1][2]} />\r\n            <CrystalButton indexes={result?.steps?.[STEP.RIGHT_TWO]} />\r\n            <CrystalButton indexes={result?.steps?.[STEP.LEFT_THREE]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:2-y:0`} onChange={handleCrystalChange(2, 0)} color={grid[2][0]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:2-y:1`} onChange={handleCrystalChange(2, 1)} color={grid[2][1]} />\r\n                    <Crystal className=\"flex justify-center items-center\" key={`x:2-y:2`} onChange={handleCrystalChange(2, 2)} color={grid[2][2]} />\r\n            <CrystalButton indexes={result?.steps?.[STEP.RIGHT_THREE]} />\r\n            <div></div><CrystalButton indexes={result?.steps?.[STEP.BOTTOM_ONE]} /><CrystalButton indexes={result?.steps?.[STEP.BOTTOM_TWO]} /><CrystalButton indexes={result?.steps?.[STEP.BOTTOM_THREE]} /><div></div>\r\n            </CrystalContainer>\r\n                <div className=\"lg:px-16 lg:py-16 p-2\">\r\n\r\n                <Actions>\r\n                <button className={`${isValid ? 'bg-blue-500 hover:bg-blue-400 text-white  border-blue-700 hover:border-blue-500' : 'bg-gray-800 hover:bg-gray-700 border-gray-900 hover:border-gray-800 text-white'} font-bold py-2 px-4 border-b-4 rounded`} onClick={toggleResolver} {...((!isValid || isSolved) && {\r\n                        disabled: 'disabled'\r\n                    })}>{(!isValid && 'Not valid') || (resolving ? 'Running...' : 'Run')}</button>\r\n                </Actions>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Game;","import React from 'react';\n// import logo from './logo.svg';\nimport './tailwind.output.css';\nimport './App.css';\nimport Minimalist from './components/Minimalist'\n\nfunction App() {\n  return (\n    <div className=\"App min-h-screen flex flex-wrap bg-gray-600 lg:p-12 p-2\">\n      <div className=\"lg:w-1/2 mr-auto ml-auto\">\n        <h1 className=\"font-bold text-white lg:text-2xl lg:pb-12 p-2\">Chronicon Mysterious Crystals resolver</h1>\n        <Minimalist className=\"\"/>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}